// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pbecs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EcsServiceClient is the client API for EcsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EcsServiceClient interface {
	// 查询ECS明细 - 支持云类型、区域、账户、分页等过滤条件
	ListEcsDetail(ctx context.Context, in *ListDetailReq, opts ...grpc.CallOption) (*ListDetailResp, error)
	// 全量查询ECS - 根据云类型
	ListEcs(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	// 全量查询所有云的ECS
	ListEcsAll(ctx context.Context, in *ListAllReq, opts ...grpc.CallOption) (*ListResp, error)
}

type ecsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEcsServiceClient(cc grpc.ClientConnInterface) EcsServiceClient {
	return &ecsServiceClient{cc}
}

func (c *ecsServiceClient) ListEcsDetail(ctx context.Context, in *ListDetailReq, opts ...grpc.CallOption) (*ListDetailResp, error) {
	out := new(ListDetailResp)
	err := c.cc.Invoke(ctx, "/pbecs.EcsService/ListEcsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecsServiceClient) ListEcs(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/pbecs.EcsService/ListEcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecsServiceClient) ListEcsAll(ctx context.Context, in *ListAllReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/pbecs.EcsService/ListEcsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EcsServiceServer is the server API for EcsService service.
// All implementations must embed UnimplementedEcsServiceServer
// for forward compatibility
type EcsServiceServer interface {
	// 查询ECS明细 - 支持云类型、区域、账户、分页等过滤条件
	ListEcsDetail(context.Context, *ListDetailReq) (*ListDetailResp, error)
	// 全量查询ECS - 根据云类型
	ListEcs(context.Context, *ListReq) (*ListResp, error)
	// 全量查询所有云的ECS
	ListEcsAll(context.Context, *ListAllReq) (*ListResp, error)
	mustEmbedUnimplementedEcsServiceServer()
}

// UnimplementedEcsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEcsServiceServer struct {
}

func (UnimplementedEcsServiceServer) ListEcsDetail(context.Context, *ListDetailReq) (*ListDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEcsDetail not implemented")
}
func (UnimplementedEcsServiceServer) ListEcs(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEcs not implemented")
}
func (UnimplementedEcsServiceServer) ListEcsAll(context.Context, *ListAllReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEcsAll not implemented")
}
func (UnimplementedEcsServiceServer) mustEmbedUnimplementedEcsServiceServer() {}

// UnsafeEcsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EcsServiceServer will
// result in compilation errors.
type UnsafeEcsServiceServer interface {
	mustEmbedUnimplementedEcsServiceServer()
}

func RegisterEcsServiceServer(s grpc.ServiceRegistrar, srv EcsServiceServer) {
	s.RegisterService(&EcsService_ServiceDesc, srv)
}

func _EcsService_ListEcsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsServiceServer).ListEcsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbecs.EcsService/ListEcsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsServiceServer).ListEcsDetail(ctx, req.(*ListDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcsService_ListEcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsServiceServer).ListEcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbecs.EcsService/ListEcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsServiceServer).ListEcs(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcsService_ListEcsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcsServiceServer).ListEcsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbecs.EcsService/ListEcsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcsServiceServer).ListEcsAll(ctx, req.(*ListAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EcsService_ServiceDesc is the grpc.ServiceDesc for EcsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EcsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbecs.EcsService",
	HandlerType: (*EcsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEcsDetail",
			Handler:    _EcsService_ListEcsDetail_Handler,
		},
		{
			MethodName: "ListEcs",
			Handler:    _EcsService_ListEcs_Handler,
		},
		{
			MethodName: "ListEcsAll",
			Handler:    _EcsService_ListEcsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/pbecs/ecs.proto",
}
