// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pboss

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OssServiceClient is the client API for OssService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OssServiceClient interface {
	ListOssDetail(ctx context.Context, in *ListDetailReq, opts ...grpc.CallOption) (*ListDetailResp, error)
	ListOss(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
}

type ossServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOssServiceClient(cc grpc.ClientConnInterface) OssServiceClient {
	return &ossServiceClient{cc}
}

func (c *ossServiceClient) ListOssDetail(ctx context.Context, in *ListDetailReq, opts ...grpc.CallOption) (*ListDetailResp, error) {
	out := new(ListDetailResp)
	err := c.cc.Invoke(ctx, "/pboss.OssService/ListOssDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossServiceClient) ListOss(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/pboss.OssService/ListOss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OssServiceServer is the server API for OssService service.
// All implementations must embed UnimplementedOssServiceServer
// for forward compatibility
type OssServiceServer interface {
	ListOssDetail(context.Context, *ListDetailReq) (*ListDetailResp, error)
	ListOss(context.Context, *ListReq) (*ListResp, error)
	mustEmbedUnimplementedOssServiceServer()
}

// UnimplementedOssServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOssServiceServer struct {
}

func (UnimplementedOssServiceServer) ListOssDetail(context.Context, *ListDetailReq) (*ListDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOssDetail not implemented")
}
func (UnimplementedOssServiceServer) ListOss(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOss not implemented")
}
func (UnimplementedOssServiceServer) mustEmbedUnimplementedOssServiceServer() {}

// UnsafeOssServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OssServiceServer will
// result in compilation errors.
type UnsafeOssServiceServer interface {
	mustEmbedUnimplementedOssServiceServer()
}

func RegisterOssServiceServer(s grpc.ServiceRegistrar, srv OssServiceServer) {
	s.RegisterService(&OssService_ServiceDesc, srv)
}

func _OssService_ListOssDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssServiceServer).ListOssDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pboss.OssService/ListOssDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssServiceServer).ListOssDetail(ctx, req.(*ListDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OssService_ListOss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssServiceServer).ListOss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pboss.OssService/ListOss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssServiceServer).ListOss(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OssService_ServiceDesc is the grpc.ServiceDesc for OssService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OssService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pboss.OssService",
	HandlerType: (*OssServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOssDetail",
			Handler:    _OssService_ListOssDetail_Handler,
		},
		{
			MethodName: "ListOss",
			Handler:    _OssService_ListOss_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/pboss/oss.proto",
}
