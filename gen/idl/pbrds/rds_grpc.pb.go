// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pbrds

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RDSServiceClient is the client API for RDSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RDSServiceClient interface {
	ListRDSDetail(ctx context.Context, in *ListDetailReq, opts ...grpc.CallOption) (*ListDetailResp, error)
	ListRDS(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
}

type rDSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRDSServiceClient(cc grpc.ClientConnInterface) RDSServiceClient {
	return &rDSServiceClient{cc}
}

func (c *rDSServiceClient) ListRDSDetail(ctx context.Context, in *ListDetailReq, opts ...grpc.CallOption) (*ListDetailResp, error) {
	out := new(ListDetailResp)
	err := c.cc.Invoke(ctx, "/pbrds.RDSService/ListRDSDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDSServiceClient) ListRDS(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/pbrds.RDSService/ListRDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RDSServiceServer is the server API for RDSService service.
// All implementations must embed UnimplementedRDSServiceServer
// for forward compatibility
type RDSServiceServer interface {
	ListRDSDetail(context.Context, *ListDetailReq) (*ListDetailResp, error)
	ListRDS(context.Context, *ListReq) (*ListResp, error)
	mustEmbedUnimplementedRDSServiceServer()
}

// UnimplementedRDSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRDSServiceServer struct {
}

func (UnimplementedRDSServiceServer) ListRDSDetail(context.Context, *ListDetailReq) (*ListDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRDSDetail not implemented")
}
func (UnimplementedRDSServiceServer) ListRDS(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRDS not implemented")
}
func (UnimplementedRDSServiceServer) mustEmbedUnimplementedRDSServiceServer() {}

// UnsafeRDSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RDSServiceServer will
// result in compilation errors.
type UnsafeRDSServiceServer interface {
	mustEmbedUnimplementedRDSServiceServer()
}

func RegisterRDSServiceServer(s grpc.ServiceRegistrar, srv RDSServiceServer) {
	s.RegisterService(&RDSService_ServiceDesc, srv)
}

func _RDSService_ListRDSDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDSServiceServer).ListRDSDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbrds.RDSService/ListRDSDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDSServiceServer).ListRDSDetail(ctx, req.(*ListDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDSService_ListRDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDSServiceServer).ListRDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbrds.RDSService/ListRDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDSServiceServer).ListRDS(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RDSService_ServiceDesc is the grpc.ServiceDesc for RDSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RDSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbrds.RDSService",
	HandlerType: (*RDSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRDSDetail",
			Handler:    _RDSService_ListRDSDetail_Handler,
		},
		{
			MethodName: "ListRDS",
			Handler:    _RDSService_ListRDS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/pbrds/rds.proto",
}
