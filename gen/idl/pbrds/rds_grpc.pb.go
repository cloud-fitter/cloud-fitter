// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pbrds

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RdsServiceClient is the client API for RdsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RdsServiceClient interface {
	// 查询RDS明细，支持云类型、区域、账户、分页等过滤条件
	ListRdsDetail(ctx context.Context, in *ListDetailReq, opts ...grpc.CallOption) (*ListDetailResp, error)
	// 根据云类型全量查询RDS
	ListRds(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
}

type rdsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRdsServiceClient(cc grpc.ClientConnInterface) RdsServiceClient {
	return &rdsServiceClient{cc}
}

func (c *rdsServiceClient) ListRdsDetail(ctx context.Context, in *ListDetailReq, opts ...grpc.CallOption) (*ListDetailResp, error) {
	out := new(ListDetailResp)
	err := c.cc.Invoke(ctx, "/pbrds.RdsService/ListRdsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdsServiceClient) ListRds(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/pbrds.RdsService/ListRds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RdsServiceServer is the server API for RdsService service.
// All implementations must embed UnimplementedRdsServiceServer
// for forward compatibility
type RdsServiceServer interface {
	// 查询RDS明细，支持云类型、区域、账户、分页等过滤条件
	ListRdsDetail(context.Context, *ListDetailReq) (*ListDetailResp, error)
	// 根据云类型全量查询RDS
	ListRds(context.Context, *ListReq) (*ListResp, error)
	mustEmbedUnimplementedRdsServiceServer()
}

// UnimplementedRdsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRdsServiceServer struct {
}

func (UnimplementedRdsServiceServer) ListRdsDetail(context.Context, *ListDetailReq) (*ListDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRdsDetail not implemented")
}
func (UnimplementedRdsServiceServer) ListRds(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRds not implemented")
}
func (UnimplementedRdsServiceServer) mustEmbedUnimplementedRdsServiceServer() {}

// UnsafeRdsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RdsServiceServer will
// result in compilation errors.
type UnsafeRdsServiceServer interface {
	mustEmbedUnimplementedRdsServiceServer()
}

func RegisterRdsServiceServer(s grpc.ServiceRegistrar, srv RdsServiceServer) {
	s.RegisterService(&RdsService_ServiceDesc, srv)
}

func _RdsService_ListRdsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdsServiceServer).ListRdsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbrds.RdsService/ListRdsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdsServiceServer).ListRdsDetail(ctx, req.(*ListDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdsService_ListRds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdsServiceServer).ListRds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbrds.RdsService/ListRds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdsServiceServer).ListRds(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RdsService_ServiceDesc is the grpc.ServiceDesc for RdsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RdsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbrds.RdsService",
	HandlerType: (*RdsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRdsDetail",
			Handler:    _RdsService_ListRdsDetail_Handler,
		},
		{
			MethodName: "ListRds",
			Handler:    _RdsService_ListRds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/pbrds/rds.proto",
}
