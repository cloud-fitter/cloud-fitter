// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.2
// source: idl/tenant/tenant.proto

package pbtenant

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 阿里云区域，需要将对应的 _ 转化为 -
type AliRegionId int32

const (
	AliRegionId_cn_qingdao     AliRegionId = 0  // 青岛
	AliRegionId_cn_beijing     AliRegionId = 1  // 北京
	AliRegionId_cn_zhangjiakou AliRegionId = 2  // 张家口
	AliRegionId_cn_huhehaote   AliRegionId = 3  // 呼和浩特
	AliRegionId_cn_wulanchabu  AliRegionId = 4  // 乌兰察布
	AliRegionId_cn_hangzhou    AliRegionId = 5  // 杭州
	AliRegionId_cn_shanghai    AliRegionId = 6  // 上海
	AliRegionId_cn_shenzhen    AliRegionId = 7  // 深圳
	AliRegionId_cn_heyuan      AliRegionId = 8  // 河源
	AliRegionId_cn_guangzhou   AliRegionId = 9  // 广州
	AliRegionId_cn_chengdu     AliRegionId = 10 // 成都
	AliRegionId_cn_hongkong    AliRegionId = 20 // 中国香港-香港
	AliRegionId_ap_southeast_1 AliRegionId = 21 // 亚太东南1-新加坡
	AliRegionId_ap_southeast_2 AliRegionId = 22 // 亚太东南2-悉尼
	AliRegionId_ap_southeast_3 AliRegionId = 23 // 亚太东南3-吉隆坡
	AliRegionId_ap_southeast_5 AliRegionId = 24 // 亚太东南5-雅加达
	AliRegionId_ap_south_1     AliRegionId = 25 // 亚太南部1-孟买
	AliRegionId_ap_northeast_1 AliRegionId = 26 // 亚太东北1-东京
	AliRegionId_us_west_1      AliRegionId = 27 // 美国西部1-硅谷
	AliRegionId_us_east_1      AliRegionId = 28 // 美国东部1-弗吉尼亚
	AliRegionId_eu_central_1   AliRegionId = 29 // 欧洲中部1-法兰克福
	AliRegionId_eu_west_1      AliRegionId = 30 // 英国（伦敦）-伦敦
	AliRegionId_me_east_1      AliRegionId = 31 // 中东东部1-迪拜
)

// Enum value maps for AliRegionId.
var (
	AliRegionId_name = map[int32]string{
		0:  "cn_qingdao",
		1:  "cn_beijing",
		2:  "cn_zhangjiakou",
		3:  "cn_huhehaote",
		4:  "cn_wulanchabu",
		5:  "cn_hangzhou",
		6:  "cn_shanghai",
		7:  "cn_shenzhen",
		8:  "cn_heyuan",
		9:  "cn_guangzhou",
		10: "cn_chengdu",
		20: "cn_hongkong",
		21: "ap_southeast_1",
		22: "ap_southeast_2",
		23: "ap_southeast_3",
		24: "ap_southeast_5",
		25: "ap_south_1",
		26: "ap_northeast_1",
		27: "us_west_1",
		28: "us_east_1",
		29: "eu_central_1",
		30: "eu_west_1",
		31: "me_east_1",
	}
	AliRegionId_value = map[string]int32{
		"cn_qingdao":     0,
		"cn_beijing":     1,
		"cn_zhangjiakou": 2,
		"cn_huhehaote":   3,
		"cn_wulanchabu":  4,
		"cn_hangzhou":    5,
		"cn_shanghai":    6,
		"cn_shenzhen":    7,
		"cn_heyuan":      8,
		"cn_guangzhou":   9,
		"cn_chengdu":     10,
		"cn_hongkong":    20,
		"ap_southeast_1": 21,
		"ap_southeast_2": 22,
		"ap_southeast_3": 23,
		"ap_southeast_5": 24,
		"ap_south_1":     25,
		"ap_northeast_1": 26,
		"us_west_1":      27,
		"us_east_1":      28,
		"eu_central_1":   29,
		"eu_west_1":      30,
		"me_east_1":      31,
	}
)

func (x AliRegionId) Enum() *AliRegionId {
	p := new(AliRegionId)
	*p = x
	return p
}

func (x AliRegionId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AliRegionId) Descriptor() protoreflect.EnumDescriptor {
	return file_idl_tenant_tenant_proto_enumTypes[0].Descriptor()
}

func (AliRegionId) Type() protoreflect.EnumType {
	return &file_idl_tenant_tenant_proto_enumTypes[0]
}

func (x AliRegionId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AliRegionId.Descriptor instead.
func (AliRegionId) EnumDescriptor() ([]byte, []int) {
	return file_idl_tenant_tenant_proto_rawDescGZIP(), []int{0}
}

// 阿里云区域，需要将对应的 _ 转化为 -
type TencentRegionId int32

const (
	TencentRegionId_ap_bangkok        TencentRegionId = 0  // 曼谷
	TencentRegionId_ap_beijing        TencentRegionId = 1  // 北京
	TencentRegionId_ap_chengdu        TencentRegionId = 2  // 成都
	TencentRegionId_ap_chongqing      TencentRegionId = 3  // 重庆
	TencentRegionId_ap_guangzhou      TencentRegionId = 4  // 广州
	TencentRegionId_ap_guangzhou_open TencentRegionId = 5  // 广州Open
	TencentRegionId_ap_hongkong       TencentRegionId = 6  // 中国香港
	TencentRegionId_ap_mumbai         TencentRegionId = 7  // 孟买
	TencentRegionId_ap_seoul          TencentRegionId = 8  // 首尔
	TencentRegionId_ap_shanghai       TencentRegionId = 9  // 上海
	TencentRegionId_ap_shanghai_fsi   TencentRegionId = 10 // 上海金融
	TencentRegionId_ap_shenzhen_fsi   TencentRegionId = 11 // 深圳金融
	TencentRegionId_ap_singapore      TencentRegionId = 12 // 新加坡
	TencentRegionId_ap_tokyo          TencentRegionId = 13 // 东京
	TencentRegionId_eu_frankfurt      TencentRegionId = 14 // 法兰克福
	TencentRegionId_eu_moscow         TencentRegionId = 15 // 莫斯科
	TencentRegionId_na_ashburn        TencentRegionId = 16 // 阿什本
	TencentRegionId_na_siliconvalley  TencentRegionId = 17 // 硅谷
	TencentRegionId_na_toronto        TencentRegionId = 18 // 多伦多
)

// Enum value maps for TencentRegionId.
var (
	TencentRegionId_name = map[int32]string{
		0:  "ap_bangkok",
		1:  "ap_beijing",
		2:  "ap_chengdu",
		3:  "ap_chongqing",
		4:  "ap_guangzhou",
		5:  "ap_guangzhou_open",
		6:  "ap_hongkong",
		7:  "ap_mumbai",
		8:  "ap_seoul",
		9:  "ap_shanghai",
		10: "ap_shanghai_fsi",
		11: "ap_shenzhen_fsi",
		12: "ap_singapore",
		13: "ap_tokyo",
		14: "eu_frankfurt",
		15: "eu_moscow",
		16: "na_ashburn",
		17: "na_siliconvalley",
		18: "na_toronto",
	}
	TencentRegionId_value = map[string]int32{
		"ap_bangkok":        0,
		"ap_beijing":        1,
		"ap_chengdu":        2,
		"ap_chongqing":      3,
		"ap_guangzhou":      4,
		"ap_guangzhou_open": 5,
		"ap_hongkong":       6,
		"ap_mumbai":         7,
		"ap_seoul":          8,
		"ap_shanghai":       9,
		"ap_shanghai_fsi":   10,
		"ap_shenzhen_fsi":   11,
		"ap_singapore":      12,
		"ap_tokyo":          13,
		"eu_frankfurt":      14,
		"eu_moscow":         15,
		"na_ashburn":        16,
		"na_siliconvalley":  17,
		"na_toronto":        18,
	}
)

func (x TencentRegionId) Enum() *TencentRegionId {
	p := new(TencentRegionId)
	*p = x
	return p
}

func (x TencentRegionId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TencentRegionId) Descriptor() protoreflect.EnumDescriptor {
	return file_idl_tenant_tenant_proto_enumTypes[1].Descriptor()
}

func (TencentRegionId) Type() protoreflect.EnumType {
	return &file_idl_tenant_tenant_proto_enumTypes[1]
}

func (x TencentRegionId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TencentRegionId.Descriptor instead.
func (TencentRegionId) EnumDescriptor() ([]byte, []int) {
	return file_idl_tenant_tenant_proto_rawDescGZIP(), []int{1}
}

// 云配置信息
type CloudConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云的配置
	Ali []*CloudConfig `protobuf:"bytes,1,rep,name=ali,proto3" json:"ali,omitempty"`
	// 腾讯云的配置
	Tencent []*CloudConfig `protobuf:"bytes,2,rep,name=tencent,proto3" json:"tencent,omitempty"`
}

func (x *CloudConfigs) Reset() {
	*x = CloudConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_tenant_tenant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudConfigs) ProtoMessage() {}

func (x *CloudConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_idl_tenant_tenant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudConfigs.ProtoReflect.Descriptor instead.
func (*CloudConfigs) Descriptor() ([]byte, []int) {
	return file_idl_tenant_tenant_proto_rawDescGZIP(), []int{0}
}

func (x *CloudConfigs) GetAli() []*CloudConfig {
	if x != nil {
		return x.Ali
	}
	return nil
}

func (x *CloudConfigs) GetTencent() []*CloudConfig {
	if x != nil {
		return x.Tencent
	}
	return nil
}

type CloudConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 账户名称，由用户自定义，必须全局唯一，方便多个系统之间的维护
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 认证方式1：与 access_secret 结合使用，两者均非空时生效
	AccessId string `protobuf:"bytes,2,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	// 认证方式1：与 access_id 结合使用，两者均非空时生效
	AccessSecret string `protobuf:"bytes,3,opt,name=access_secret,json=accessSecret,proto3" json:"access_secret,omitempty"`
}

func (x *CloudConfig) Reset() {
	*x = CloudConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_tenant_tenant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudConfig) ProtoMessage() {}

func (x *CloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_idl_tenant_tenant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudConfig.ProtoReflect.Descriptor instead.
func (*CloudConfig) Descriptor() ([]byte, []int) {
	return file_idl_tenant_tenant_proto_rawDescGZIP(), []int{1}
}

func (x *CloudConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudConfig) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *CloudConfig) GetAccessSecret() string {
	if x != nil {
		return x.AccessSecret
	}
	return ""
}

type StringMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringMessage) Reset() {
	*x = StringMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_tenant_tenant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMessage) ProtoMessage() {}

func (x *StringMessage) ProtoReflect() protoreflect.Message {
	mi := &file_idl_tenant_tenant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMessage.ProtoReflect.Descriptor instead.
func (*StringMessage) Descriptor() ([]byte, []int) {
	return file_idl_tenant_tenant_proto_rawDescGZIP(), []int{2}
}

func (x *StringMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_idl_tenant_tenant_proto protoreflect.FileDescriptor

var file_idl_tenant_tenant_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x64, 0x6c, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x62, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x68, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x6c, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x62, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x61, 0x6c, 0x69, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x0b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x22, 0x25, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x9d, 0x03, 0x0a, 0x0b, 0x41, 0x6c, 0x69, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6e, 0x5f, 0x71, 0x69,
	0x6e, 0x67, 0x64, 0x61, 0x6f, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6e, 0x5f, 0x62, 0x65,
	0x69, 0x6a, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6e, 0x5f, 0x7a, 0x68,
	0x61, 0x6e, 0x67, 0x6a, 0x69, 0x61, 0x6b, 0x6f, 0x75, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x63,
	0x6e, 0x5f, 0x68, 0x75, 0x68, 0x65, 0x68, 0x61, 0x6f, 0x74, 0x65, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x63, 0x6e, 0x5f, 0x77, 0x75, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x61, 0x62, 0x75, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0x68, 0x6f, 0x75, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x6e, 0x67, 0x68, 0x61, 0x69,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x6e, 0x5f, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x65,
	0x6e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6e, 0x5f, 0x68, 0x65, 0x79, 0x75, 0x61, 0x6e,
	0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6e, 0x5f, 0x67, 0x75, 0x61, 0x6e, 0x67, 0x7a, 0x68,
	0x6f, 0x75, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x6e, 0x67,
	0x64, 0x75, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x6e, 0x5f, 0x68, 0x6f, 0x6e, 0x67, 0x6b,
	0x6f, 0x6e, 0x67, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x74,
	0x68, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x70, 0x5f,
	0x73, 0x6f, 0x75, 0x74, 0x68, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x32, 0x10, 0x16, 0x12, 0x12, 0x0a,
	0x0e, 0x61, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x33, 0x10,
	0x17, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x65, 0x61, 0x73,
	0x74, 0x5f, 0x35, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x74,
	0x68, 0x5f, 0x31, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x70, 0x5f, 0x6e, 0x6f, 0x72, 0x74,
	0x68, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x73, 0x5f,
	0x77, 0x65, 0x73, 0x74, 0x5f, 0x31, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x73, 0x5f, 0x65,
	0x61, 0x73, 0x74, 0x5f, 0x31, 0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c, 0x65, 0x75, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x31, 0x10, 0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x65, 0x75, 0x5f,
	0x77, 0x65, 0x73, 0x74, 0x5f, 0x31, 0x10, 0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x65, 0x5f, 0x65,
	0x61, 0x73, 0x74, 0x5f, 0x31, 0x10, 0x1f, 0x2a, 0xdc, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x61,
	0x70, 0x5f, 0x62, 0x61, 0x6e, 0x67, 0x6b, 0x6f, 0x6b, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x61,
	0x70, 0x5f, 0x62, 0x65, 0x69, 0x6a, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x61,
	0x70, 0x5f, 0x63, 0x68, 0x65, 0x6e, 0x67, 0x64, 0x75, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x61,
	0x70, 0x5f, 0x63, 0x68, 0x6f, 0x6e, 0x67, 0x71, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x61, 0x70, 0x5f, 0x67, 0x75, 0x61, 0x6e, 0x67, 0x7a, 0x68, 0x6f, 0x75, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x61, 0x70, 0x5f, 0x67, 0x75, 0x61, 0x6e, 0x67, 0x7a, 0x68, 0x6f, 0x75, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x61, 0x70, 0x5f, 0x68, 0x6f, 0x6e,
	0x67, 0x6b, 0x6f, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x70, 0x5f, 0x6d, 0x75,
	0x6d, 0x62, 0x61, 0x69, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x6f,
	0x75, 0x6c, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x6e, 0x67,
	0x68, 0x61, 0x69, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x6e,
	0x67, 0x68, 0x61, 0x69, 0x5f, 0x66, 0x73, 0x69, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x70,
	0x5f, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x65, 0x6e, 0x5f, 0x66, 0x73, 0x69, 0x10, 0x0b, 0x12,
	0x10, 0x0a, 0x0c, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x61, 0x70, 0x6f, 0x72, 0x65, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x10, 0x0d, 0x12,
	0x10, 0x0a, 0x0c, 0x65, 0x75, 0x5f, 0x66, 0x72, 0x61, 0x6e, 0x6b, 0x66, 0x75, 0x72, 0x74, 0x10,
	0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x65, 0x75, 0x5f, 0x6d, 0x6f, 0x73, 0x63, 0x6f, 0x77, 0x10, 0x0f,
	0x12, 0x0e, 0x0a, 0x0a, 0x6e, 0x61, 0x5f, 0x61, 0x73, 0x68, 0x62, 0x75, 0x72, 0x6e, 0x10, 0x10,
	0x12, 0x14, 0x0a, 0x10, 0x6e, 0x61, 0x5f, 0x73, 0x69, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x76, 0x61,
	0x6c, 0x6c, 0x65, 0x79, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x6e, 0x61, 0x5f, 0x74, 0x6f, 0x72,
	0x6f, 0x6e, 0x74, 0x6f, 0x10, 0x12, 0x32, 0xd4, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f,
	0x12, 0x17, 0x2e, 0x70, 0x62, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x6d, 0x6f, 0x3a, 0x01, 0x2a, 0x1a, 0x74, 0x92, 0x41, 0x71, 0x12, 0x1e, 0xe6, 0x89,
	0x80, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x91, 0xe7, 0xa7, 0x9f, 0xe6, 0x88, 0xb7, 0xe7, 0x9a, 0x84,
	0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x1a, 0x4f, 0x0a, 0x1f,
	0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x66, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x66, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x26, 0x5a,
	0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x66, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_idl_tenant_tenant_proto_rawDescOnce sync.Once
	file_idl_tenant_tenant_proto_rawDescData = file_idl_tenant_tenant_proto_rawDesc
)

func file_idl_tenant_tenant_proto_rawDescGZIP() []byte {
	file_idl_tenant_tenant_proto_rawDescOnce.Do(func() {
		file_idl_tenant_tenant_proto_rawDescData = protoimpl.X.CompressGZIP(file_idl_tenant_tenant_proto_rawDescData)
	})
	return file_idl_tenant_tenant_proto_rawDescData
}

var file_idl_tenant_tenant_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_idl_tenant_tenant_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_idl_tenant_tenant_proto_goTypes = []interface{}{
	(AliRegionId)(0),      // 0: pbtenant.AliRegionId
	(TencentRegionId)(0),  // 1: pbtenant.TencentRegionId
	(*CloudConfigs)(nil),  // 2: pbtenant.CloudConfigs
	(*CloudConfig)(nil),   // 3: pbtenant.CloudConfig
	(*StringMessage)(nil), // 4: pbtenant.StringMessage
}
var file_idl_tenant_tenant_proto_depIdxs = []int32{
	3, // 0: pbtenant.CloudConfigs.ali:type_name -> pbtenant.CloudConfig
	3, // 1: pbtenant.CloudConfigs.tencent:type_name -> pbtenant.CloudConfig
	4, // 2: pbtenant.TenantService.Echo:input_type -> pbtenant.StringMessage
	4, // 3: pbtenant.TenantService.Echo:output_type -> pbtenant.StringMessage
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_idl_tenant_tenant_proto_init() }
func file_idl_tenant_tenant_proto_init() {
	if File_idl_tenant_tenant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_idl_tenant_tenant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_tenant_tenant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_tenant_tenant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_idl_tenant_tenant_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_idl_tenant_tenant_proto_goTypes,
		DependencyIndexes: file_idl_tenant_tenant_proto_depIdxs,
		EnumInfos:         file_idl_tenant_tenant_proto_enumTypes,
		MessageInfos:      file_idl_tenant_tenant_proto_msgTypes,
	}.Build()
	File_idl_tenant_tenant_proto = out.File
	file_idl_tenant_tenant_proto_rawDesc = nil
	file_idl_tenant_tenant_proto_goTypes = nil
	file_idl_tenant_tenant_proto_depIdxs = nil
}
